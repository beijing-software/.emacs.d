#+title: Emacs Configuration File
* Configuration
** Theme
   #+begin_src emacs-lisp
  (global-hl-line-mode t)
  (global-prettify-symbols-mode t)
  (setq all-the-icons-color-icons nil)
  (setq company-text-icons-add-background t)
  (custom-set-faces
   '(default ((t
	       (:inherit nil :extend nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 173 :width normal :foundry "MONO" :family "Cousine Nerd Font")))))
   #+end_src
** Keybinds
   #+begin_src emacs-lisp
  (global-set-key (kbd "C-c e") 'config-visit)
  (global-set-key (kbd "C-c r") 'config-reload)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "M-y") 'popup-kill-ring)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  (global-set-key (kbd "C-x C-b") 'counsel-switch-buffer)
  (global-set-key (kbd "C-;") 'comment-or-uncomment-region-or-line)
  (global-set-key (kbd "M-p") 'drag-stuff-up)
  (global-set-key (kbd "M-n") 'drag-stuff-down)
   #+end_src
** Defaults
   #+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq ring-bell-function 'ignore)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-visual-line-mode 1)
   #+end_src
** Backups
   #+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq auto-save-list-file-prefix nil)
   #+end_src
** Startup
   #+begin_src emacs-lisp
  (setq inhibit-startup-message t)
   (setq initial-buffer-choice (lambda () (get-buffer-create  "*dashboard*")))
   #+end_src
** Scrolling
   #+begin_src emacs-lisp
  (setq
   scroll-conservatively 1000
   pixel-scroll-mode 1
   scroll-step 1
   redisplay-dont-pause t
   fast-but-imprecise-scrolling nil)
   #+end_src  
** Line-Numbers
   #+begin_src emacs-lisp
  (require 'display-line-numbers)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (line-number-mode 1)
   #+end_src
** Time
   #+begin_src emacs-lisp
  (display-time-mode 1)
   #+end_src
** Org
   #+begin_src emacs-lisp
  (require 'org-tempo)
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" . "src emacs-lisp"))
   #+end_src
** Ansi-term
   #+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
   #+end_src
** Electric
   #+begin_src emacs-lisp
  (electric-pair-mode t)
  (setq electric-pair-inhibit-predicate (lambda (c) (char-equal c ?<)))
   #+end_src
* Packages
** Package Archives
   #+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa"        . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org"          . "https://orgmode.org/elpa/")
			   ("elpa"         . "https://elpa.gnu.org/packages/")))
  (package-initialize)
   #+END_SRC
** use-package
   #+BEGIN_SRC emacs-lisp
  ;;Require use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
   #+END_SRC

** which-key
   #+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode))
   #+end_src
** beacon
   #+begin_src emacs-lisp
  (use-package beacon
    :init
    (beacon-mode 1))
   #+end_src
** org-bullets
   #+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+end_src
** rainbow-mode
   #+begin_src emacs-lisp
  (use-package rainbow-mode)
  (define-global-minor-mode global-rainbow-mode rainbow-mode
    (lambda () (rainbow-mode 1)))
  (global-rainbow-mode 1)
   #+end_src
** hungry-delete
   #+begin_src emacs-lisp
  (use-package hungry-delete
    :config
    (global-hungry-delete-mode))
   #+end_src
** sudo-edit
   #+begin_src emacs-lisp
  (use-package sudo-edit
    :config
    (setq sudo-edit-local-method "doas"))
   #+end_src
** rainbow-delimiters
   #+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+end_src
** dashboard
   #+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/community-logo.svg")
    (setq dashboard-image-banner-max-height 1000)
    (setq dashboard-image-banner-max-width 1000)
    (setq dashboard-banner 3)
    (setq dashboard-center-contents nil)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-items '((projects . 10)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-navigator t)
    (setq dashboard-set-footer nil))
   #+end_src
** company
   #+begin_src emacs-lisp
  (use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode))
   #+end_src
** dmenu
   #+begin_src emacs-lisp
  (use-package dmenu)
   #+end_src
** COMMENT exwm
   #+begin_src emacs-lisp
  ;; (use-package exwm
  ;;   :config
  ;;   (require 'exwm-config)
  ;;   (exwm-config-default))
  ;; (require 'exwm-systemtray)
  ;; (exwm-systemtray-enable)
  ;; (exwm-config-ido)
  ;; (add-hook 'exwm-update-class-hook
  ;; 	  (lambda ()
  ;; 	    (exwm-workspace-rename-buffer exwm-class-name)))
   #+end_src
** all-the-icons
   #+begin_src emacs-lisp
  (use-package all-the-icons)
   #+end_src
** doom-modeline
   #+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (doom-modeline-mode 1))
  (setq doom-modeline-height 25)
  (setq doom-modeline-bar-width 3)
  (setq doom-modeline-buffer-file-name-style 'buffer-name)
  (setq doom-modeline-icon nil)
   #+end_src
** ivy
   #+begin_src emacs-lisp
  (use-package ivy)
   #+end_src
** counsel
   #+begin_src emacs-lisp
  (use-package counsel)
   #+end_src
** popup-kill-ring
   #+begin_src emacs-lisp
  (use-package popup-kill-ring)
   #+end_src
** helm
   #+begin_src emacs-lisp
  (use-package helm
    :config
    (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-z") 'helm-select-action))
    (setq helm-find-files-doc-header nil)
   #+end_src
** helm-icons
   #+begin_src emacs-lisp
  (use-package helm-icons
    :config
    (setq helm-icons-provider 'all-the-icons)
    (helm-icons-enable))
   #+end_src
** writeroom-mode
   #+begin_src emacs-lisp
  (use-package writeroom-mode)
   #+end_src
** autothemer
   #+begin_src emacs-lisp
  (use-package autothemer)
   #+end_src
** treemacs
   #+begin_src emacs-lisp
  (use-package treemacs
    :config
    (treemacs-hide-gitignored-files-mode t)
    (setq treemacs-width-is-initially-locked nil))
  (with-eval-after-load 'treemacs

    (defun treemacs-ignore-example (filename absolute-path)
      (or (string-equal filename "foo")
	  (string-suffix-p ".class" absolute-path)))
  
    (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-example))
   #+end_src
** treemacs-all-the-icons
   #+begin_src emacs-lisp
  (use-package treemacs-all-the-icons
    :config
    (treemacs-load-theme "all-the-icons"))
   #+end_src
** zoom
   #+begin_src emacs-lisp
  (use-package zoom)
   #+end_src
** drag-stuff
   #+begin_src emacs-lisp
  (use-package drag-stuff
    :config
    (drag-stuff-global-mode 1))
   #+end_src
** yafolding
   #+begin_src emacs-lisp
  (use-package yafolding
    :config
    (add-hook 'prog-mode-hook
	      (lambda () (yafolding-mode))))
   #+end_src
** highlight-indent-guides
   #+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character))
   #+end_src
* Functions
** config-visit
   #+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
   #+end_src
** config-reload
   #+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
   #+end_src
** split-and-follow-horizontally
   #+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
   #+end_src
** split-and-follow-vertically
   #+begin_src emacs-lisp
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
   #+end_src

** kill-current-buffer
   #+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
   #+end_src

** comment-or-uncomment-region-or-line
   #+begin_src emacs-lisp
  (defun comment-or-uncomment-region-or-line ()
      (interactive)
      (let (beg end)
	  (if (region-active-p)
	      (setq beg (region-beginning) end (region-end))
	      (setq beg (line-beginning-position) end (line-end-position)))
	  (comment-or-uncomment-region beg end)))
   #+end_src
* C++ Development
** lsp
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :hook ((c-mode . lsp)
	      (c++-mode . lsp)
	      (lsp-mode . lsp-enable-which-key-integration))
       :commands lsp
       :config
       (setq lsp-keymap-prefix "C-c l")
       (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
       (setq lsp-file-watch-threshold 15000))
   #+end_src
** lsp-ui
   #+begin_src emacs-lisp
     (use-package lsp-ui
       :commands (lsp-ui-mode)
       :config
       (setq lsp-ui-doc-enable nil)
       (setq lsp-ui-doc-delay 0.5)
       (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
       (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
       )
   #+end_src
** lsp-ivy
   #+begin_src emacs-lisp
     (use-package lsp-ivy
       :commands lsp-ivy-workspace-symbol)
   #+end_src
** lsp-treemacs
   #+begin_src emacs-lisp
     (use-package lsp-treemacs
       :comands lsp-treemacs-errors-list)
   #+end_src
** company
   #+begin_src emacs-lisp
     (use-package company
       :bind ("M-/" . company-complete-common-or-cycle)
       :init (add-hook 'after-init-hook 'global-company-mode)
       :config
       (setq company-show-numbers t
	     company-minimum-prefix-length 1
	     company-idle-delay 0.5
	     company-backends
	     '(company-files
	       company-keywords
	       company-capf
	       company-yasnippet)
	     (company-abbrev company-dabbrev)))
   #+end_src
** company-box
   #+begin_src emacs-lisp
     (use-package company-box
       :after company
       :hook (company-mode . company-box-mode))
   #+end_src
** flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :init (global-flycheck-mode)
       :config
       (setq flycheck-display-errors-function
	     #'flycheck-display-error-messages-error-list)
       (setq flycheck-indication-mode nil))
   #+end_src
** flycheck-pos-tip
   #+begin_src emacs-lisp
     (use-package flycheck-pos-tip
       :after flycheck
       :config
       (flycheck-pos-tip-mode))
   #+end_src
** ccls
   #+begin_src emacs-lisp
     (use-package ccls
       :config
       :hook ((c-mode c++-mode objc-mode cuda-mode) .
	      (lambda () (require 'ccls) (lsp)))
       (setq ccls-executable "/usr/bin/ccls")
       (setq ccls-initialization-options
	     '(:index (:comments 2) :completion (:detailedLabel t)))
       )
   #+end_src
** srefactor
   #+begin_src emacs-lisp
     (use-package srefactor
       :config
       (semantic-mode 1)
       (define-key c-mode-map (kbd "M-RET") 'srefactor-refactor-at-point)
       (define-key c++-mode-map (kbd "M-RET") 'srefactor-refactor-at-point)
       )
   #+end_src
